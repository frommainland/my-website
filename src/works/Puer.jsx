import './RumbleInTheJungle.scss'
import './Puer.scss'

const Puer = () => {
	return (
		<div className="work-page-wrap">
			<article className="work-article-wrap">
				<header className="work-header">
					<h1>普洱设计系统</h1>
					<p>大家都在聊的设计系统到底怎么落地？</p>
				</header>
				<section className="work-content-wrap">
					<div className="work-content-text">
						<h3>机遇</h3>
						<p>
							摩拜在快速增长的共享经济中，仅在出行领域就尝试了单车，拼车，专车，共享汽车，助力车...对于一名设计师，这是一次难得的成长机会。然而从一个设计组的角度来看，却产生了许多新的挑战。怎样保证多个业务线快速发展的同时，保持体验和品牌的一致？不同业务的重叠部分在扩展中能够快速的迭代？在快速迭代的同时，还能保证维持甚至减少欠下的"设计债"？怎样能够和开发更好的交流以及减少人为错误的产生？
						</p>
					</div>
					<div className="work-content-text">
						<h3>设计问题场景一</h3>
						<ol>
							<li>
								出现新的功能需求，需要在之前的设计上迭代。
								<ul className="work-puer-problem">
									<li>找不到源文件</li>
									<li>
										源文件有不明确的地方，但没有设计师能够确认
									</li>
									<li>线上版本已经和源文件不同</li>
								</ul>
							</li>
							<li>
								设计师从线上截图，和之前相似文件对比，重新组合文件，复现线上版本。
							</li>
							<li>正式开始设计新的功能需求。</li>
						</ol>
					</div>
					<div className="work-content-text">
						<h3>设计问题场景二</h3>
						<ol>
							<li>
								出现新的功能需求A，需要2个业务线的设计师合作得到一个综合方案。
							</li>
							<li>
								新的需求B出现，需求A的方案和需求B业务线不一致，重新考虑整合修改新设计B，同时修改设计A。
							</li>
							<li>需求C，D出现，重复步骤 1。</li>
						</ol>
					</div>
					<div className="work-content-text">
						<p>
							熟练的设计师在单独完成某一个流程上不会耗费时间，但是两个甚至更多设计师同时推进单独业务线或合作的项目，产生不同的功能流程，视觉和交互页面，这些没有整合过的”设计债”最终会影响到其他设计师的工作流程，从而让设计越来越难提供解决方案，评审设计方案更加困难，最终让用户的使用预期越来越不一致。这可能不会一夜发生，用户也不会马上察觉，但是一旦超过阈值，用户便会永不回头，同时传播到更多的用户，导致更大规模的流失。
						</p>
						<p>
							当前对这个问题的解决方法是创建ui样式规范，同时配设计解释文档，但是规范很快就跟不上业务发展的速度，设计师在花费大量时间修改之前的业务文件的同时，又要保证新的业务保持使用最新的样式，让设计师忙于重复的修改删除的体力劳动之中。
						</p>
						<p>
							下半年开始，我们尝试用一个更工程化的方法去解决这个设计工作问题。
						</p>
					</div>
				</section>

				<section className="work-content-wrap">
					<div className="work-content-text">
						<h1>标准</h1>
						<p>
							随着业务的增加，团队的扩展，大部分设计师会沉淀在一个业务线上。对于一个设计师来说，维护和增加业务线的流程是通过产品页面组合而成，但是对于一个团队来说，组件化更适合全局的设计和一致的体验。通过使用sketch
							library，包含颜色，字体排版以及图标以及由它们生成的大粒度组件来保证标准的唯一性，并且实时更新到所有设计师的设计页面中去，节省了设计师大量的手工调整的时间，让设计师能够在讨论和设计组件的上花费更多的时间。
						</p>
						<img
							src={require('../image/work-puer-standard.png')}
							alt={'design system standard'}
						/>
					</div>
				</section>

				<section className="work-content-wrap">
					<div className="work-content-text">
						<h1>分发</h1>
						<p>
							我们在把改版项目的组件化时，更新和替换library文件是手动操作中最麻烦的地方。更新好的library文件发到设计群里，容易被其他讨论所淹没，如果设计师正好看到新的文件，每次下载之后还需要重新命名和覆盖。新的组件需要通知到每一位设计师，但是大家时间难以统一，需要有log，版本以及需求提交的管理系统。
						</p>
						<p>
							我们选择了用git来解决这些问题。每次更新library之后，push到repo中去，同时它可以有效的记录本次更新的内容并且免去了设计师再重命名和替换新文件的问题，在时间管理上，通过issues可以保持library的及时性以及保证任何小的细节不会丢失。
						</p>
						<img
							src={require('../image/work-puer-distribution.png')}
							alt={'design system distribution'}
						/>
					</div>
				</section>

				<section className="work-content-wrap">
					<div className="work-content-text">
						<h1>对接</h1>
						<p>
							由于品牌的微升级，需要更改主按钮颜色和圆角数值，设计师只需要给出新的数值，剩余的修改开发就可以自行解决了。但是从后续的设计走查来看，我们发现不同的平台模块，不同的开发，不同的命名方式导致出现了多处的不一致。以下是同一种按钮在不同平台的上的不同开发命名。
							<code>
								Prime Button / Button Main / ButtonGrade1 /
								&lt;XUIMainButton&gt;
							</code>
						</p>
						<p>
							虽然通过sketch自动标注和切图减少了设计师手动操作的工作量，但是并没有提高开发的效率。特别是从业务高速扩展到平缓发展期，设计和开发的沟通也应该转化为从页面的对接变为模块的对接，从视觉样式的对接变为组件原型的对接。和开发的对接我们从组件命名方式开始，不同的颜色，字体，间距，投影重新开始。有了基础命名方式之后，设计再依据新的命名升级组件规范。
						</p>
					</div>
				</section>

				<section className="work-content-wrap">
					<div className="work-content-text">
						<h1>后续问题</h1>
						<p>
							在设计组件化之前，我们担心它的坏处会大于好处，导致迁移之后引起更多的麻烦。在经过几个月的工作之后，当时的想象中会遇到的问题在组件化的过程中并没有影响到设计流程。
						</p>
						<p>
							每一个业务线都有其特殊的设计需求，如果使用统一的设计组件是不是会限制设计，甚至起到破坏业务，将事情本末倒置？
						</p>
						<p>
							给出不同需求的解决方案是最重要的，而不是组件本身。设计师提出方案，并且把新的设计回馈到组件化系统之中，同时让其他设计师更容易了解和接触到新设计，才会有更多的优化和进步。
						</p>

						<br />
						<h3>为什么叫设计系统而不是设计规范？</h3>
						<p>
							设计规范是设计系统的一部分，是文档的记录。一个设计系统不但要有更新的过程记录，同时要保证工程化，能够提高设计师的效率。组件化后的设计不但能够一键升级视觉样式，同时可以帮助设计师快速迭代原型，模拟用户真实的使用场景。组件不应该只是视觉层面的，它应该包含了交互，动效以及真实数据api的一个完整封装。我们从静态的psd文件，到含有矢量数据sketch，再到有数据且能够触摸的原型，让设计方案能够尽可能的还原场景，还原用户。
						</p>

						<br />
						<h3>
							有了组件化，创造力会退化，任何拥有组件化的人都可以做需求了吗？
						</h3>
						<p>
							组件化的本身是一种工具，它提升的是设计自身，开发自身以及设计与开发之间的效率问题，但是它不能解决设计本身。就好比网格系统只是一个指导，了解和使用它并不代表会有一个好的方案。
						</p>

						<br />
						<h3>保持设计的一致性有那么重要吗？</h3>
						<p>
							用户体验的一个重要部分就是设计的一致性。它不但是用户使用习惯和效率的保证，更是品牌和产品质量的体现，让用户信任和区别于同类的其他产品，保证用户的活跃度以及更多的留存可能，直到愿意付出更多的时间和金钱，并且帮助分享和传播这个产品。
						</p>
					</div>
				</section>

				<section className="work-content-wrap">
					<div className="work-content-text">
						<h1>未来</h1>
						<p>
							设计和开发结合的越紧密，效率和一致性就越高。虽然我们组在设计的组件化上并没有走很久，但是从设计和开发的反馈上，已经大大超过之前的改版。这不但设计和开发互相理解的开始，更是工作效率上的大幅提升。随着设计工具的增多，我们相信未来会有更多工具来提高我们的效率，把更多的时间花费在更好的产品体验上。
						</p>
					</div>
				</section>
			</article>
		</div>
	)
}

export default Puer
